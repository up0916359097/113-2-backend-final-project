// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  STAFF
  CHEF
  OWNER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  notifications Notification[]
}

model MenuItem {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orderItems    OrderItem[]
}

model Order {
  id            String    @id @default(cuid())
  customer      User      @relation(fields: [customerId], references: [id])
  customerId    String
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  items         OrderItem[]
  paymentStatus Boolean   @default(false)
  completedAt   DateTime?
  notifications Notification[]
}

model OrderItem {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  menuItem      MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId    String
  quantity      Int       @default(1)
  specialRequest String?
  createdAt     DateTime  @default(now())
}

model Notification {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String
  message       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
}